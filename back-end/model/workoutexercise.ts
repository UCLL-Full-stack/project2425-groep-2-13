export class WorkoutExercise {
    readonly workout_exercise_id: number;
    readonly workout_id: number;
    readonly exercise_id: number;
    readonly sets: number;
    readonly reps: number;
    readonly rpe: string;
    readonly rest_time: string;

    constructor(workoutExercise: { workout_exercise_id: number; workout_id: number; exercise_id: number; sets: number; reps: number; rpe: string; rest_time: string }) {
        this.validate(workoutExercise);
        this.workout_exercise_id = workoutExercise.workout_exercise_id;
        this.workout_id = workoutExercise.workout_id;
        this.exercise_id = workoutExercise.exercise_id;
        this.sets = workoutExercise.sets;
        this.reps = workoutExercise.reps;
        this.rpe = workoutExercise.rpe;
        this.rest_time = workoutExercise.rest_time;
    }
    validate(workoutExercise: { workout_exercise_id: number; workout_id: number; exercise_id: number; sets: number; reps: number; rpe: string; rest_time: string; }) {
        if (workoutExercise.sets <= 0 || !Number.isInteger(workoutExercise.sets)) {
            throw new Error("Invalid Sets: Must be a positive integer");
        }
        if (workoutExercise.reps <= 0 || !Number.isInteger(workoutExercise.reps)) {
            throw new Error("reps must be a positive integer.");
        }
        const rpePattern = /^[1-9]$|^10$|^[1-9]-[1-9]$|^[1-9]-10$/; // generated by AI
        if (!workoutExercise.rpe || typeof workoutExercise.rpe !== 'string' || !rpePattern.test(workoutExercise.rpe)) {
            throw new Error("rpe must be a valid string in the format '1-10' or '7-8'.");
        }

        const restTimePattern = /^\d{1,2}:\d{2}$/; // generated by AI
        if (!workoutExercise.rest_time || typeof workoutExercise.rest_time !== 'string' || !restTimePattern.test(workoutExercise.rest_time)) {
            throw new Error("rest_time must be in the format 'MM:SS' or 'M:SS'.");
        }
    }

    equals({ workout_exercise_id, workout_id, exercise_id, sets, reps, rpe, rest_time }: { workout_exercise_id: number; workout_id: number; exercise_id: number; sets: number; reps: number; rpe: string; rest_time: string }): boolean {
        return (
            this.workout_exercise_id === workout_exercise_id &&
            this.workout_id === workout_id &&
            this.exercise_id === exercise_id &&
            this.sets === sets &&
            this.reps === reps &&
            this.rpe === rpe &&
            this.rest_time === rest_time
        );
    }
}